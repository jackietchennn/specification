// http://eslint.org/docs/user-guide/configuring

module.exports = {
    root: true,
    parser: 'vue-eslint-parser',
    parserOptions: {
        parser: 'babel-eslint',
        sourceType: 'module',
        ecmaFeatures: {
            jsx: true
        }
    },
    env: {
        browser: true,
        es6: true,
        node: true
    },
    extends: [
        'plugin:vue/recommended',
        'eslint:recommended',
        'plugin:prettier/recommended',
        'prettier/vue'
    ],
    // required to lint *.vue files
    plugins: ['vue'],
    // add your custom rules here
    rules: {
        // plugin:vue/recommend 规则覆盖
        'vue/component-definition-name-casing': ['error', 'PascalCase'], // --------------------------- 强制使用大驼峰方式命名组件名称
        'vue/no-v-html': 'off', // -------------------------------------------------------------------- 强制使用v-html指令

        // Possible Errors
        'use-isnan': 2, // ----------------------------------------------------------------------------- 强制使用Number.isNaN或isNaN函数比较NaN值
        'valid-typeof': 2, // -------------------------------------------------------------------------- 强制typeof表达式与有效的字符串字面值进行比较
        'no-console': 'off', // ----------------------------------------------------------------------- 禁止使用console
        'no-cond-assign': 2, // ----------------------------------------------------------------------- 禁止条件表达式中赋值
        'no-control-regex': 0, // --------------------------------------------------------------------- 禁止正则表达式中使用控制字符
        'no-dupe-args': 2, // ------------------------------------------------------------------------- 禁止在函数定义中出现重复参数
        'no-dupe-keys': 2, // ------------------------------------------------------------------------- 禁止在对象字面量中出现重复key值
        'no-duplicate-case': 2, // --------------------------------------------------------------------- 禁止在switch循环中出现重复case条件
        'no-empty-character-class': 2, // -------------------------------------------------------------- 禁止在正则表达式中出现空字符集
        'no-ex-assign': 2, // -------------------------------------------------------------------------- 禁止在catch子集(代码块)中赋值传递给catch的err结果值
        'no-extra-boolean-cast': 2, // ----------------------------------------------------------------- 禁止额外(无效)的布尔值转换
        'no-func-assign': 2, // ------------------------------------------------------------------------ 禁止对函数声明重复赋值
        'no-inner-declarations': [2, 'functions'], // -------------------------------------------------- 禁止在代码块中进行函数声明
        'no-invalid-regexp': 2, // --------------------------------------------------------------------- 禁止正则表达式的构造函数中使用无效的正则表达式字符串
        'no-irregular-whitespace': 2, // --------------------------------------------------------------- 禁止不正规空格
        'no-unsafe-negation': 2, // -------------------------------------------------------------------- 禁止使用不安全(产生Bug)的对立表示式(!)
        'no-obj-calls': 2, // -------------------------------------------------------------------------- 禁止将Math、JSON、Reflect和Atomics对象作为函数调用
        'no-regex-spaces': 2, // ----------------------------------------------------------------------- 禁止在正则表达式字面量中使用多个空格
        'no-sparse-arrays': 2, // ---------------------------------------------------------------------- 禁止使用稀疏数组
        'no-unexpected-multiline': 2, // --------------------------------------------------------------- 禁止使用容易让人混淆的多行表达式
        'no-unreachable': 2, // ------------------------------------------------------------------------ 禁止在return、throw、continue、break语句之后出现代码
        'no-unsafe-finally': 2, // --------------------------------------------------------------------- 禁止在try|catch|finally控制流中的finally子集中直接使用return|throw|continue|break语句(会覆盖try|catch的返回结果)，可间接在函数或类中使用
        'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0, // ------------------------------- 禁止使用debugger

        // Best Practices
        'accessor-pairs': 2, // ------------------------------------------------------------------------ 强制成对使用访问器属性getter|setter(默认检测存在setter且不存在getter情况)
        curly: [2, 'multi-line'], // ----------------------------------------------------------------- 强制多条语句使用花括号，单条语句不作限制
        eqeqeq: ['error', 'always', { null: 'ignore' }], // ------------------------------------------ 强制使用'==='或'!=='，不对null使用当前规则
        yoda: [2, 'never'], // ----------------------------------------------------------------------- 禁止在条件语句的变量与字面量比较中使用yoda模式(字面量值在前变量在后，例：if ('red' === color))
        'no-caller': 2, // ----------------------------------------------------------------------------- 禁止使用arguments.caller或arguments.callee
        'no-empty-pattern': 2, // ---------------------------------------------------------------------- 禁止使用空解构
        'no-eval': 2, // ------------------------------------------------------------------------------- 禁止使用eval方法
        'no-extend-native': 2, // ---------------------------------------------------------------------- 禁止修改JavaScript内置对象原型
        'no-extra-bind': 2, // ------------------------------------------------------------------------- 禁止使用无效bind(原函数中并没有this使用)
        'no-fallthrough': 2, // ------------------------------------------------------------------------ 禁止在switch语句的case子集中缺失return、break、throw语句，可以在case子集顶部使用注释 '// fallsthrough'忽略检测
        'no-implied-eval': 2, // ----------------------------------------------------------------------- 禁止通过setTimeout、setInterval、execScript隐式使用eval方法
        'no-iterator': 2, // --------------------------------------------------------------------------- 禁止使用__iterator__属性
        'no-labels': 2, // ----------------------------------------------------------------------------- 禁止使用标记语句
        'no-lone-blocks': 2, // ------------------------------------------------------------------------ 禁止使用无效的代码块字符(花括号)
        'no-multi-str': 2, // -------------------------------------------------------------------------- 禁止使用无效的多行字符串
        'no-global-assign': 2, // ---------------------------------------------------------------------- 禁止修改只读全局变量
        'no-new-wrappers': 2, // ----------------------------------------------------------------------- 禁止在new操作符中使用字符串、数字和布尔值内置对象
        'no-octal': 2, // ------------------------------------------------------------------------------ 禁止使用八进制字面量
        'no-octal-escape': 2, // ----------------------------------------------------------------------- 禁止在字符串字面量中使用八进制转义序列
        'no-proto': 2, // ------------------------------------------------------------------------------ 禁止使用非标准api '__proto__'
        'no-redeclare': 2, // -------------------------------------------------------------------------- 禁止变量重复声明
        'no-self-assign': 2, // ------------------------------------------------------------------------ 禁止自我赋值(左右两边相等)
        'no-self-compare': 2, // ----------------------------------------------------------------------- 禁止自我比较(左右两边相等)
        'no-sequences': 2, // -------------------------------------------------------------------------- 禁止在多表达式间使用逗号，例外：for循环初始化及更新部分，表达式序列显示包装在圆括号中
        'no-throw-literal': 2, // ---------------------------------------------------------------------- 禁止以字面量或其它非error对象的表达式作为异常抛出值(只能使用error抛出异常)
        'no-unmodified-loop-condition': 2, // ---------------------------------------------------------- 禁止循环条件值在循环过程中不发生变化(导致无限循环)
        'no-useless-call': 2, // ----------------------------------------------------------------------- 禁止call、apply的无效调用(使用前后效果相同)
        'no-useless-escape': 0, // --------------------------------------------------------------------- 禁止无效的转义行为(例：转义字母、数字)
        'no-with': 2, // ------------------------------------------------------------------------------- 禁止使用with

        // Strict Mode
        // Variables
        'no-delete-var': 2, // ------------------------------------------------------------------------- 禁止对变量使用delete操作符
        'no-label-var': 2, // -------------------------------------------------------------------------- 禁止标签与变量在同一作用域下重名
        'no-return-assign': [2, 'except-parens'], // --------------------------------------------------- 禁止在return语句中出现赋值操作，例外：整个赋值行为包装在圆括号中
        'no-shadow-restricted-names': 2, // ------------------------------------------------------------ 禁止对NaN、Infinity、undefined、eval、arguments特殊含义的值属性进行操作（混淆代码，参考eslint解释）
        'no-undef': 2, // ------------------------------------------------------------------------------ 禁止使用未声明变量，除非在'/*global variableName*/'注释中标明
        'no-undef-init': 2, // ------------------------------------------------------------------------- 禁止变量声明初始化时赋值undefined
        'no-unused-vars': [
            2,
            {
                // --------------------------------------------------------------------- 禁止存在未使用的变量、函数、函数参数
                vars: 'all',
                args: 'none'
            }
        ],

        // Stylistic Issues
        camelcase: [
            2,
            {
                // -------------------------------------------------------------------------- 强制变量|属性命名为小驼峰命名，前置或尾随下划线符合小驼峰命名
                properties: 'always'
            }
        ],
        'new-cap': [
            2,
            {
                // ---------------------------------------------------------------------------- 强制new操作符调用的构造函数的函数名首字母大写(大驼峰命名)
                newIsCap: true,
                capIsNew: false
            }
        ],
        'no-new-object': 2, // ------------------------------------------------------------------------- 禁止对Object对象使用new进行实例化
        'no-unneeded-ternary': [
            2,
            {
                // ---------------------------------------------------------------- 禁止非必要三元运算，允许条件表达式作为默认的赋值模式
                defaultAssignment: false
            }
        ],
        'one-var': [
            2,
            {
                // ---------------------------------------------------------------------------- 强制(默认)对未初始化变量进行一次性声明，对已初始化(有值的)变量则每一个都要声明一次
                initialized: 'never'
            }
        ],
        'spaced-comment': [
            2,
            'always',
            {
                // ----------------------------------------------------------- 强制在注释符后面加一个空格，例外：如下marker标记的字符，与注释符之间不存在空格
                markers: [
                    'global',
                    'globals',
                    'eslint',
                    'eslint-disable',
                    '*package',
                    '!',
                    ','
                ]
            }
        ],

        // ECMAScript 6
        'constructor-super': 2, // --------------------------------------------------------------------- 强制ECMAScript 6的类继承构造函数中必需存在super调用
        'prefer-const': 2, // -------------------------------------------------------------------------- 强制对不再赋值的变量使用const关键字声明
        'no-array-constructor': 2, // ------------------------------------------------------------------ 禁止使用数组构造函数实例化数组
        'no-class-assign': 2, // ----------------------------------------------------------------------- 禁止对ES6的命名类赋值，例： class A (...) {...}
        'no-const-assign': 2, // ----------------------------------------------------------------------- 禁止对常量赋值
        'no-dupe-class-members': 2, // ----------------------------------------------------------------- 禁止ES6声明类时出现重复类成员(原型属性、方法)
        'no-new-symbol': 2, // ------------------------------------------------------------------------- 禁止对ES6的Symbol原始类型使用new操作符
        'no-this-before-super': 2, // ------------------------------------------------------------------ 禁止在类构造函数中调用super方法前使用this关键字
        'no-useless-computed-key': 2, // --------------------------------------------------------------- 禁止在对象和类中使用不必要的计算属性键，例：字符串字面量不能使用方括号包装
        'no-useless-constructor': 2 // ---------------------------------------------------------------- 禁止在ES6类声明时创建空的构造函数(JavaScript会自动创建一个空的构造函数如果用户不创建的情况下)

        /** ****************************************************************/
        /** ********************** Deprecated ******************************/
        /** ****************************************************************/
        // 'handle-callback-err': [2, '^(err|error)$'],
        // 'no-native-reassign': 2,    // replaced by 'no-global-assign'
        // 'no-negated-in-lhs': 2,     // replaced by 'no-unsafe-negation'
        // 'no-new-require': 2,
        // 'no-path-concat': 2,
        // 'no-spaced-func': 2,        // replaced by 'func-call-spacing'

        /** ****************************************************************/
        /** ********* disabled rules from eslint-config-prettier ***********/
        /** ****************************************************************/
        // 'vue/max-attributes-per-line': [2, { // -------------------------------------------------------- 强制每行标记开始最多存在10个属性，折行后每行最多1个属性
        //   'singleline': 10,
        //   'multiline': {
        //     'max': 1,
        //     'allowFirstLine': false
        //   }
        // }],
        // 'vue/multiline-html-element-content-newline':'off', // ----------------------------------------- 强制关闭多行元素内容与元素不同行
        // 'vue/singleline-html-element-content-newline': 'off', // --------------------------------------- 强制关闭单行元素内容与元素不同行，例：<div attr>content</div>
        // 'array-bracket-spacing': [2, 'never'], // ------------------------------------------------------ 强制数组字面量左右括号不存在空格
        // 'arrow-spacing': [2, { // ---------------------------------------------------------------------- 强制箭头函数的箭头符号前后存在空格
        //   'before': true,
        //   'after': true
        // }],
        // 'block-spacing': [2, 'always'], // ------------------------------------------------------------- 强制同行花括号的开始结束标记对使用一致的空格数量
        // 'brace-style': [2, '1tbs', { // ---------------------------------------------------------------- 强制统一使用一种花括号样式，单行花括号也允许
        //   'allowSingleLine': true
        // }],
        // 'comma-dangle': [2, 'never'], // --------------------------------------------------------------- 强制禁止尾随逗号
        // 'comma-spacing': [2, { // ---------------------------------------------------------------------- 强制逗号后添加一个空格
        //   'before': false,
        //   'after': true
        // }],
        // 'comma-style': [2, 'last'], // ----------------------------------------------------------------- 强制数组元素、对象属性或变量声明后在同一行上使用逗号
        // 'dot-location': [2, 'property'], // ------------------------------------------------------------ 强制属性访问中的'.'操作符与访问属性同行
        // 'eol-last': 2, // ------------------------------------------------------------------------------ 强制在文件末尾一行使用换行符
        // 'func-call-spacing': 2, // --------------------------------------------------------------------- 强制函数调用时函数名与左括号之间不存在空格
        // 'generator-star-spacing': [2, { // ------------------------------------------------------------- 强制generator函数的'*'前后都存在空格
        //   'before': true,
        //   'after': true
        // }],
        // 'indent': [2, 2, { // -------------------------------------------------------------------------- 强制缩进2个空格，switch语句的case子集缩进1个空格
        //   'SwitchCase': 1
        // }],
        // 'jsx-quotes': [2, 'prefer-single'], // --------------------------------------------------------- 强制对所有不包含单引号的JSX属性值使用单引号
        // 'key-spacing': [2, { // ------------------------------------------------------------------------ 强制对象字面量的键值对在冒号后加一个空格
        //   'beforeColon': false,
        //   'afterColon': true
        // }],
        // 'keyword-spacing': [2, { // -------------------------------------------------------------------- 强制JavaScript关键字操作符前后添加一个空格
        //   'before': true,
        //   'after': true
        // }],
        // 'new-parens': 2, // ---------------------------------------------------------------------------- 强制在没有参数的构造函数调用后使用圆括号
        // 'no-extra-parens': [2, 'functions'], // -------------------------------------------------------- 禁止对函数表达式使用无效圆括号
        // 'no-floating-decimal': 2, // ------------------------------------------------------------------- 禁止在数字字面量中出现前置或尾随小数点
        // 'no-mixed-spaces-and-tabs': 2, // -------------------------------------------------------------- 禁止混合使用空格和tab
        // 'no-multi-spaces': 2, // ----------------------------------------------------------------------- 禁止在逻辑表达式、条件表达式、声明、数组元素、对象属性、序列和函数参数周围有多个空格
        // 'no-multiple-empty-lines': [2, { // ------------------------------------------------------------ 禁止多空行，允许最多空一行
        //   'max': 1
        // }],
        // 'no-trailing-spaces': 2, // -------------------------------------------------------------------- 禁止末尾的空格(空格、制表符和其他Unicode空格字符)出现在行尾
        // 'no-whitespace-before-property': 2, // --------------------------------------------------------- 禁止对象属性在同一行时，'.'周围或左括号前有空格
        // 'object-curly-spacing': [2, 'always', { // ----------------------------------------------------- 强制对象字面量左右花括号之间存在空格，嵌套对象与外层对象的右花括号之间不存在空格
        //   objectsInObjects: false
        // }],
        // 'operator-linebreak': [2, 'after', { // -------------------------------------------------------- 强制所有操作符之后使用换行符，例外：三元运算符的'?', ':'则是在操作符前使用换行符
        //   'overrides': {
        //     '?': 'before',
        //     ':': 'before'
        //   }
        // }],
        // 'padded-blocks': [2, 'never'], // -------------------------------------------------------------- 强制代码块收尾行无空行
        // 'semi': [2, 'never'],
        // 'semi-spacing': [2, { // ----------------------------------------------------------------------- 强制分号后使用空格
        //   'before': false,
        //   'after': true
        // }],
        // 'space-before-blocks': [2, 'always'], // ------------------------------------------------------- 强制代码块左括号前使用空格
        // 'space-before-function-paren': [2, 'never'], // ------------------------------------------------ 强制函数名与圆括号不存在空格
        // 'space-in-parens': [2, 'never'], // ------------------------------------------------------------ 强制圆括号内开始结束位置不使用空格
        // 'space-infix-ops': 2, // ----------------------------------------------------------------------- 强制中间操作符前后都存在空格
        // 'space-unary-ops': [2, { // -------------------------------------------------------------------- 强制使用字母型一元操作符后面有一个空格，字符型一元操作符前面有一个空格
        //   'words': true,
        //   'nonwords': false
        // }],
        // 'template-curly-spacing': [2, 'never'], // ----------------------------------------------------- 禁止模板语法的('${}')左右花括号存在空格
        // 'wrap-iife': [2, 'any'], // -------------------------------------------------------------------- 强制使用圆括号包装自调用匿名函数
        // 'yield-star-spacing': [2, 'both'], // ---------------------------------------------------------- 强制yield关键字的'*'前后存在空格
        // 'quotes': [2, 'single', { // ------------------------------------------------------------------- 强制全局使用单引号，例外：存在转义字符时单双引号都可以使用；反引号'`'不检测
        //   'avoidEscape': true,
        //   'allowTemplateLiterals': true
        // }]
    }
}
